#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tesst
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_BAIXE")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertQuetXe(QuetXe instance);
    partial void UpdateQuetXe(QuetXe instance);
    partial void DeleteQuetXe(QuetXe instance);
    partial void InsertBangThe(BangThe instance);
    partial void UpdateBangThe(BangThe instance);
    partial void DeleteBangThe(BangThe instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::tesst.Properties.Settings.Default.QL_BAIXEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<QuetXe> QuetXes
		{
			get
			{
				return this.GetTable<QuetXe>();
			}
		}
		
		public System.Data.Linq.Table<BangThe> BangThes
		{
			get
			{
				return this.GetTable<BangThe>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuetXe")]
	public partial class QuetXe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDThe;
		
		private string _BIENSO;
		
		private string _AnhThe;
		
		private EntityRef<BangThe> _BangThe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTheChanging(string value);
    partial void OnIDTheChanged();
    partial void OnBIENSOChanging(string value);
    partial void OnBIENSOChanged();
    partial void OnAnhTheChanging(string value);
    partial void OnAnhTheChanged();
    #endregion
		
		public QuetXe()
		{
			this._BangThe = default(EntityRef<BangThe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDThe", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDThe
		{
			get
			{
				return this._IDThe;
			}
			set
			{
				if ((this._IDThe != value))
				{
					if (this._BangThe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTheChanging(value);
					this.SendPropertyChanging();
					this._IDThe = value;
					this.SendPropertyChanged("IDThe");
					this.OnIDTheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BIENSO", DbType="NVarChar(11) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BIENSO
		{
			get
			{
				return this._BIENSO;
			}
			set
			{
				if ((this._BIENSO != value))
				{
					this.OnBIENSOChanging(value);
					this.SendPropertyChanging();
					this._BIENSO = value;
					this.SendPropertyChanged("BIENSO");
					this.OnBIENSOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnhThe", DbType="NVarChar(100)")]
		public string AnhThe
		{
			get
			{
				return this._AnhThe;
			}
			set
			{
				if ((this._AnhThe != value))
				{
					this.OnAnhTheChanging(value);
					this.SendPropertyChanging();
					this._AnhThe = value;
					this.SendPropertyChanged("AnhThe");
					this.OnAnhTheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BangThe_QuetXe", Storage="_BangThe", ThisKey="IDThe", OtherKey="MaThe", IsForeignKey=true)]
		public BangThe BangThe
		{
			get
			{
				return this._BangThe.Entity;
			}
			set
			{
				BangThe previousValue = this._BangThe.Entity;
				if (((previousValue != value) 
							|| (this._BangThe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BangThe.Entity = null;
						previousValue.QuetXes.Remove(this);
					}
					this._BangThe.Entity = value;
					if ((value != null))
					{
						value.QuetXes.Add(this);
						this._IDThe = value.MaThe;
					}
					else
					{
						this._IDThe = default(string);
					}
					this.SendPropertyChanged("BangThe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BangThe")]
	public partial class BangThe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaThe;
		
		private bool _TinhTrang;
		
		private EntitySet<QuetXe> _QuetXes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaTheChanging(string value);
    partial void OnMaTheChanged();
    partial void OnTinhTrangChanging(bool value);
    partial void OnTinhTrangChanged();
    #endregion
		
		public BangThe()
		{
			this._QuetXes = new EntitySet<QuetXe>(new Action<QuetXe>(this.attach_QuetXes), new Action<QuetXe>(this.detach_QuetXes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaThe", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaThe
		{
			get
			{
				return this._MaThe;
			}
			set
			{
				if ((this._MaThe != value))
				{
					this.OnMaTheChanging(value);
					this.SendPropertyChanging();
					this._MaThe = value;
					this.SendPropertyChanged("MaThe");
					this.OnMaTheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TinhTrang", DbType="Bit NOT NULL")]
		public bool TinhTrang
		{
			get
			{
				return this._TinhTrang;
			}
			set
			{
				if ((this._TinhTrang != value))
				{
					this.OnTinhTrangChanging(value);
					this.SendPropertyChanging();
					this._TinhTrang = value;
					this.SendPropertyChanged("TinhTrang");
					this.OnTinhTrangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BangThe_QuetXe", Storage="_QuetXes", ThisKey="MaThe", OtherKey="IDThe")]
		public EntitySet<QuetXe> QuetXes
		{
			get
			{
				return this._QuetXes;
			}
			set
			{
				this._QuetXes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuetXes(QuetXe entity)
		{
			this.SendPropertyChanging();
			entity.BangThe = this;
		}
		
		private void detach_QuetXes(QuetXe entity)
		{
			this.SendPropertyChanging();
			entity.BangThe = null;
		}
	}
}
#pragma warning restore 1591
